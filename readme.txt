Сиквел "Герой и Чудовища 2: волшебный тотем"

Выбран шаблон абстрактная фабрика, для пораждения разных персонажей



Возьмите требования из задания «герой и чудовища». Расширьте игру используя ООП и шаблоны проектирования.

Требования для автоматической проверки решения юнит-тестами
- Главный (он же единственный) файл вашего решения называется main.py
- Главная функция, запустив которую начнется игра - это функция с названием game() без параметров
- Перед тем как дать игроку выбор драться с чудовищем или убежать, на экран должна быть выведена любая строка, в которой присутствует слово БОЙ. в этой же строке первое встреченное число будет обозначать число жизней чудовища, а второе - его силу удара
- Перед тем как дать игроку выбор взять меч или пройти мимо него, на экран должна быть выведена любая строка, в которой присутствует слово МЕЧ, а также число обозначающее его силу атаки
- При победе в игре, на экран должна быть выведена любая строка, в которой присутствует слово ПОБЕДА
- При поражении в игре, на экран должна быть выведена любая строка, в которой присутствует слово ПОРАЖЕНИЕ
- Эти переменные должны быть глобальными : monster_counter - счетчик поверженных героем чудовищ, hp - текущее состояние здоровье героя, attack - текущая сила удара героя


В вашей обновлённой игре будут три вида чудовищ, каждый со своим типом атаки.

У героя тоже есть класс на выбор: он может быть воином, лучником или магом. Класс нужно выбрать в начале игры.

Попадающиеся предметы тоже могут быть разными:

меч

лук

стрелы

книга заклинаний

яблочко

тотем


Если класс игрока — воин, то максимальный предел случайного показателя атаки от попадающегося меча должен быть увеличен.
 Воин может случайным образом защищаться от атак ближнего боя.

Если класс игрока — лучник, то максимальный предел случайного показателя атаки от попадающегося лука должен быть увеличен.
Лучник может случайным образом защищаться от атак лучников. Лук атакует первее меча.

Если класс игрока — маг, то максимальный предел случайного показателя атаки от попадающейся книги заклинаний должен быть увеличен.
Маг может случайным образом защищаться от магических атак. Магия атакует первее меча но позже лука.



При битве герою предоставляется тип атаки на выбор. Нельзя выбрать атаку оружие для которой недоступно.

Независимо от класса, герой начинает свой путь с мечом.


Атака теперь ведётся пошагово. После каждого удара можно выбрать другую атаку если и протагонист и противник ещё живы.
 Во время боя есть вариант убежать от противника.


Тотем позволяет сохранить текущее состояние игры. Тотем можно подобрать или обойти.
Если у героя есть тотем - можно при проигрыше загрузить игру с момента поднятия предыдущего волшебного тотема.
Загрузка одноразовая - при использовании тотема место сохранения теряется и сам тотем исчезает.
Можете воспринимать тотем как одноразовое сохранение.

В рюкзаке игрока четыре кармана под предметы. В один карман может уместиться либо меч либо лук либо стрелы либо книга
заклинаний либо тотем. То есть есть возможность произвести атаку разными видами оружия если возможно. При поднятии нового
предмета и недостаче места в рюкзаке можно выбросить один старый предмет.  При выбрасывании предмета им больше нельзя воспользоваться,
в том числе тотемом.


Требуется
Дописать программу под новые требования

Написать программу в объектно-ориентированном стиле

Применять шаблоны

Свои объяснения в выборе того или иного шаблона проектирования написать в readme-файл.

Следовать принципам solid

Покрыть код тестами не менее чем на 80 %

Вызывать автоматические проверки кода с помощью tox

Не разрешается
Списывать у других студентов


Требования к качеству кода
Формат кода соответствует pep8
Проверка: flake8 --max-line-length=120 .

Формат докстрингов соответствует pep 257
Проверка: pep257 .

Формат аннотаций соответствует pep 484
Проверка: mypy . --disallow-untyped-calls --disallow-untyped-defs --disallow-incomplete-defs --check-untyped-defs  --disallow-untyped-decorators --ignore-missing-imports --pretty

Если в проекте используются сторонние библиотеки — они все указаны в файле requirements.txt вместе с версиями

Отсутствует мертвый код
Проверка:  vulture . --min-confidence 70

Индекс поддерживаемости кода на отметке не ниже «B».
Проверка: radon mi -m .

 Покрытие кода тестами не менее 80%

